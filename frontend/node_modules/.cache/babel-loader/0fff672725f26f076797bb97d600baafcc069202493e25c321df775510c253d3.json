{"ast":null,"code":"import _applyDecoratedDescriptor from \"/home/NIX/lazoryk/projects/react_ts/todoapp/todo-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nvar _class,\n  _s = $RefreshSig$();\nimport { createContext, useContext } from 'react';\nimport { observable, action, makeObservable } from 'mobx';\nexport class Task {\n  constructor(id, title) {\n    this.id = void 0;\n    this.title = void 0;\n    this.id = id;\n    this.title = title;\n    makeObservable(this, {\n      title: observable\n    });\n  }\n}\nexport let TaskStore = (_class = class TaskStore {\n  constructor() {\n    this.tasks = [];\n    makeObservable(this, {\n      tasks: observable,\n      fetchTa\n    });\n  }\n  async fetchTasks() {\n    try {\n      const response = await fetch('http://localhost:3000/tasks');\n      const tasks = await response.json();\n      this.tasks = tasks;\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  }\n  async addTask(title) {\n    try {\n      const response = await fetch('http://localhost:3000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: Date.now(),\n          title\n        })\n      });\n      const task = await response.json();\n      this.tasks.push(task);\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  }\n}, (_applyDecoratedDescriptor(_class.prototype, \"fetchTasks\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"fetchTasks\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addTask\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addTask\"), _class.prototype)), _class);\nexport class RootStore {\n  constructor() {\n    this.taskStore = void 0;\n    this.taskStore = new TaskStore();\n  }\n}\nconst rootStore = new RootStore();\nconst RootStoreContext = /*#__PURE__*/createContext(rootStore);\nexport const useRootStore = () => {\n  _s();\n  return useContext(RootStoreContext);\n};\n_s(useRootStore, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");","map":{"version":3,"names":["createContext","useContext","observable","action","makeObservable","Task","constructor","id","title","TaskStore","_class","tasks","fetchTa","fetchTasks","response","fetch","json","error","console","addTask","method","headers","body","JSON","stringify","Date","now","task","push","_applyDecoratedDescriptor","prototype","Object","getOwnPropertyDescriptor","RootStore","taskStore","rootStore","RootStoreContext","useRootStore","_s"],"sources":["/home/NIX/lazoryk/projects/react_ts/todoapp/todo-app/src/stores/RootStore.ts"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { observable, action, makeObservable } from 'mobx';\n\nexport class Task {\n  id: number;\n  title: string;\n\n  constructor(id: number, title: string) {\n    this.id = id;\n    this.title = title;\n    makeObservable(this, {\n        title: observable\n    })\n  }\n}\n\nexport class TaskStore {\n  tasks: Task[] = [];\n\n  constructor() {\n    makeObservable(this, {\n        tasks: observable,\n        fetchTa\n    })\n  }\n\n  @action\n  async fetchTasks(): Promise<void> {\n    try {\n      const response = await fetch('http://localhost:3000/tasks');\n      const tasks = await response.json();\n      this.tasks = tasks;\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  }\n\n  @action\n  async addTask(title: string): Promise<void> {\n    try {\n      const response = await fetch('http://localhost:3000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ id: Date.now(), title }),\n      });\n      const task = await response.json();\n      this.tasks.push(task);\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  }\n}\n\nexport class RootStore {\n  taskStore: TaskStore;\n\n  constructor() {\n    this.taskStore = new TaskStore();\n  }\n}\n\nconst rootStore = new RootStore();\nconst RootStoreContext = createContext<RootStore>(rootStore);\n\nexport const useRootStore = (): RootStore => useContext(RootStoreContext);"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,UAAU,EAAEC,MAAM,EAAEC,cAAc,QAAQ,MAAM;AAEzD,OAAO,MAAMC,IAAI,CAAC;EAIhBC,WAAWA,CAACC,EAAU,EAAEC,KAAa,EAAE;IAAA,KAHvCD,EAAE;IAAA,KACFC,KAAK;IAGH,IAAI,CAACD,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClBJ,cAAc,CAAC,IAAI,EAAE;MACjBI,KAAK,EAAEN;IACX,CAAC,CAAC;EACJ;AACF;AAEA,WAAaO,SAAS,IAAAC,MAAA,GAAf,MAAMD,SAAS,CAAC;EAGrBH,WAAWA,CAAA,EAAG;IAAA,KAFdK,KAAK,GAAW,EAAE;IAGhBP,cAAc,CAAC,IAAI,EAAE;MACjBO,KAAK,EAAET,UAAU;MACjBU;IACJ,CAAC,CAAC;EACJ;EAEA,MACMC,UAAUA,CAAA,EAAkB;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;MAC3D,MAAMJ,KAAK,GAAG,MAAMG,QAAQ,CAACE,IAAI,CAAC,CAAC;MACnC,IAAI,CAACL,KAAK,GAAGA,KAAK;IACpB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF;EAEA,MACME,OAAOA,CAACX,KAAa,EAAiB;IAC1C,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEjB,EAAE,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC;UAAElB;QAAM,CAAC;MAChD,CAAC,CAAC;MACF,MAAMmB,IAAI,GAAG,MAAMb,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,IAAI,CAACL,KAAK,CAACiB,IAAI,CAACD,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;EACF;AACF,CAAC,GAAAY,yBAAA,CAAAnB,MAAA,CAAAoB,SAAA,iBA3BE3B,MAAM,GAAA4B,MAAA,CAAAC,wBAAA,CAAAtB,MAAA,CAAAoB,SAAA,iBAAApB,MAAA,CAAAoB,SAAA,GAAAD,yBAAA,CAAAnB,MAAA,CAAAoB,SAAA,cAWN3B,MAAM,GAAA4B,MAAA,CAAAC,wBAAA,CAAAtB,MAAA,CAAAoB,SAAA,cAAApB,MAAA,CAAAoB,SAAA,IAAApB,MAAA;AAkBT,OAAO,MAAMuB,SAAS,CAAC;EAGrB3B,WAAWA,CAAA,EAAG;IAAA,KAFd4B,SAAS;IAGP,IAAI,CAACA,SAAS,GAAG,IAAIzB,SAAS,CAAC,CAAC;EAClC;AACF;AAEA,MAAM0B,SAAS,GAAG,IAAIF,SAAS,CAAC,CAAC;AACjC,MAAMG,gBAAgB,gBAAGpC,aAAa,CAAYmC,SAAS,CAAC;AAE5D,OAAO,MAAME,YAAY,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAiBrC,UAAU,CAACmC,gBAAgB,CAAC;AAAA;AAACE,EAAA,CAA7DD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}